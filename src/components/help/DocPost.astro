---
import { type CollectionEntry } from 'astro:content'

import { MarkdownContent } from '@components/markdown-content'
import BaseLayout from '@layouts/BaseLayout.astro'

import { render } from 'astro:content'

import type { DocNode } from '@/lib/docs'
import { cn } from '@/lib/shadcn-utils'
import { ArrowLeft, ArrowRight } from 'lucide-react'
import { BaseCol } from '../layout/base-col'
import { TableOfContents } from '../toc'
import { DocCrumb } from './doc-crumb'
import { DocDrawer } from './doc-drawer'
import { DocTreeNode } from './doc-tree-node'
import { TocMenu } from './toc-menu'

interface Props {
  post: CollectionEntry<'docs'>
  rootNode: DocNode
  slug: string[]
  nextSlug?: DocNode
  prevSlug?: DocNode
  //topicTree: ITopicTree
}

const LINK_CLS = 'flex flex-row items-center gap-4 group'

const ARROW_CLS =
  'w-4 opacity-50 group-hover:opacity-100 group-focus-visible:opacity-100 trans-opacity'

const { post, rootNode, slug, nextSlug, prevSlug } = Astro.props
const { Content, headings } = await render(post)

//const filePath = `/${path.join('/')}`

// const stack = topicTree.children.toReversed().map(t => ({ level: 0, tree: t }))

// const flatTree = []

// while (stack.length > 0) {
//   const { level, tree } = stack.pop()!

//   flatTree.push({ name: tree.name, level })

//   for (const t of tree.children.toReversed()) {
//     stack.push({ level: level + 1, tree: t })
//   }
// }

// for this path, find the topic children

// let tm = topicTree
// for (const p of node.path) {
//   tm = tm.children.find((t) => t.title === p)!
//   pathChildren.push(tm.children)
// }
---

<BaseLayout title={post.data.title} bg="bg-background">
  <DocDrawer
    node={rootNode}
    slug={slug}
    client:only="react"
    slot="small-header-left"
  />

  <TocMenu slot="small-header-bottom" client:only="react" />

  <main
    slot="main"
    class="mx-auto grid min-h-screen w-2/3 grid-cols-1 gap-8 lg:grid-cols-5"
  >
    <aside
      class="sticky top-20 hidden h-screen overflow-x-hidden overflow-y-auto lg:block"
      style={{ height: 'calc(100vh - 5rem)' }}
    >
      <DocTreeNode
        node={rootNode}
        slug={slug}
        client:only="react"
        className="text-sm"
      />
    </aside>

    <BaseCol className="min-h-screen gap-y-8 lg:col-span-3">
      <DocCrumb slug={slug} />

      <MarkdownContent className="docs flex grow flex-col text-sm">
        <Content />
      </MarkdownContent>

      <div class="hidden grid-cols-2 gap-4 pt-8 md:grid">
        <div>
          {
            prevSlug && (
              <a href={`/docs/${prevSlug.slug.join('/')}`} class={LINK_CLS}>
                <ArrowLeft className={ARROW_CLS} strokeWidth={3} />

                <span class="text-left">
                  <span class="trans-opacity text-sm opacity-50 group-hover:opacity-100 group-focus-visible:opacity-100">
                    Previous
                  </span>
                  <br />
                  <span class="text-xl font-medium">{prevSlug.title}</span>
                </span>
              </a>
            )
          }
        </div>
        <div>
          {
            nextSlug && (
              <a
                href={`/docs/${nextSlug.slug.join('/')}`}
                class={cn(LINK_CLS, 'justify-end text-right')}
              >
                <span class="text-right">
                  <span class="trans-opacity text-sm opacity-50 group-hover:opacity-100 group-focus-visible:opacity-100">
                    Next
                  </span>
                  <br />
                  <span class="text-xl font-medium">{nextSlug.title}</span>
                </span>

                <ArrowRight className={ARROW_CLS} strokeWidth={3} />
              </a>
            )
          }
        </div>
      </div>

      <!-- <Footer /> -->
    </BaseCol>

    <aside
      class="sticky top-20 hidden overflow-x-hidden overflow-y-auto lg:block"
      style={{ height: 'calc(100vh - 5rem)' }}
    >
      <TableOfContents title="On This Page" client:only="react" />
    </aside>
  </main>
</BaseLayout>
