---
import { type CollectionEntry } from 'astro:content'

import { MarkdownContent } from '@components/markdown-content'
import BaseLayout from '@layouts/BaseLayout.astro'

import { render } from 'astro:content'

import type { DocNode } from '@/lib/docs'
import { ArrowLeft, ArrowRight } from 'lucide-react'
import { BaseCol } from '../layout/base-col'
import { HCenterCol } from '../layout/h-center-col'
import { TableOfContents } from '../toc'
import { DocDrawer } from './doc-drawer'
import { DocTreeNode } from './doc-tree-node'
import { TocMenu } from './toc-menu'

interface Props {
  post: CollectionEntry<'docs'>
  rootNode: DocNode
  slug: string[]
  nextSlug?: { slug: string; title: string }
  prevSlug?: { slug: string; title: string }
  //topicTree: ITopicTree
}

const { post, rootNode, slug, nextSlug, prevSlug } = Astro.props
const { Content, headings } = await render(post)

//const filePath = `/${path.join('/')}`

// const stack = topicTree.children.toReversed().map(t => ({ level: 0, tree: t }))

// const flatTree = []

// while (stack.length > 0) {
//   const { level, tree } = stack.pop()!

//   flatTree.push({ name: tree.name, level })

//   for (const t of tree.children.toReversed()) {
//     stack.push({ level: level + 1, tree: t })
//   }
// }

// for this path, find the topic children

// let tm = topicTree
// for (const p of node.path) {
//   tm = tm.children.find((t) => t.title === p)!
//   pathChildren.push(tm.children)
// }
---

<BaseLayout title={post.data.title} bg="bg-background">
  <DocDrawer
    node={rootNode}
    slug={slug}
    client:only="react"
    slot="small-header-left"
  />

  <TocMenu slot="small-header-bottom" client:only="react" />

  <HCenterCol slot="main" className="mt-4 min-h-screen">
    <div
      class="grid w-full grow grid-cols-1 p-4 lg:w-4/5 lg:grid-cols-5 lg:gap-x-8"
    >
      <aside class="col-span-1 hidden flex-col lg:flex">
        <div class="sticky top-28">
          <DocTreeNode
            node={rootNode}
            slug={slug}
            client:only="react"
            className="text-sm"
          />
        </div>
      </aside>

      <BaseCol className="col-span-3 grow gap-y-8">
        <MarkdownContent className="docs flex grow flex-col text-sm">
          <Content />
        </MarkdownContent>

        <div
          class="border-border grid grid-cols-1 gap-4 border-t pt-8 md:grid-cols-2 lg:items-center"
        >
          {
            prevSlug && (
              <a
                href={`/${prevSlug.slug}`}
                class="flex flex-row items-center justify-center gap-4 md:justify-start"
              >
                <ArrowLeft className="w-4 hidden md:block" strokeWidth={3} />

                <span class="text-center md:text-left">
                  <span class="text-foreground/70 text-sm">Previous</span>
                  <br />
                  <span class="text-xl">{prevSlug.title}</span>
                </span>
              </a>
            )
          }
          {
            nextSlug && (
              <a
                href={`/${nextSlug.slug}`}
                class="flex flex-row items-center justify-center gap-4 md:justify-end"
              >
                <span class="text-center md:text-right">
                  <span class="text-foreground/70 text-sm">Next</span>
                  <br />
                  <span class="text-xl">{nextSlug.title}</span>
                </span>

                <ArrowRight className="w-4 hidden md:block" strokeWidth={3} />
              </a>
            )
          }
        </div>
      </BaseCol>

      <aside class="col-span-1 hidden flex-col lg:flex">
        <TableOfContents
          title="On This Page"
          client:only="react"
          className="sticky top-28"
        />
      </aside>
    </div>
  </HCenterCol></BaseLayout
>
