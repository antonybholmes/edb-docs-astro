---
import DocIndex from '@/components/help/DocIndex.astro'
import DocPost from '@/components/help/DocPost.astro'
import { buildNodeTree, DOCS_DIR, type DocNode } from '@/lib/docs'
import { getCollection, type CollectionEntry } from 'astro:content'

export async function getStaticPaths() {
  const [rootNode, orderedSlugs] = await buildNodeTree(DOCS_DIR)

  const routes: {
    params: { slug: string }
    props: {
      post?: CollectionEntry<'docs'>
      node?: DocNode
      rootNode: DocNode
      nextSlug?: DocNode
      prevSlug?: DocNode
      type: 'page' | 'auto'
    }
  }[] = []

  for (const [idx, node] of orderedSlugs.entries()) {
    const nextSlug = orderedSlugs[idx + 1]
    const prevSlug = orderedSlugs[idx - 1]

    routes.push({
      params: { slug: node.slug.join('/') },
      props: { node, rootNode, type: 'auto', nextSlug, prevSlug },
    })
  }

  const posts = await getCollection('docs')

  for (const post of posts) {
    const idx = orderedSlugs.findIndex((s) => s.slug.join('/') === post.id)

    const nextSlug = orderedSlugs[idx + 1]
    const prevSlug = orderedSlugs[idx - 1]

    routes.push({
      params: { slug: post.id },
      props: { post, rootNode, nextSlug, prevSlug, type: 'page' },
    })
  }

  return routes
}

type Props = {
  post?: CollectionEntry<'docs'>
  node?: DocNode
  rootNode: DocNode
  nextSlug?: DocNode
  prevSlug?: DocNode
  type: 'page' | 'auto'
}

const { slug } = Astro.params
const { post, node, rootNode, nextSlug, prevSlug, type } = Astro.props
---

{
  type === 'auto' ? (
    <DocIndex rootNode={rootNode} node={node!} slug={slug.split('/')} />
  ) : (
    <DocPost
      post={post!}
      rootNode={rootNode}
      slug={slug.split('/')}
      nextSlug={nextSlug}
      prevSlug={prevSlug}
    />
  )
}
